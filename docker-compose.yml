version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 15s
      retries: 10
    networks:
      - confluent

  kafka-broker:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka-broker
    container_name: kafka-broker
    command: ["/scripts/wait-for-it.sh", "zookeeper:2181", "-t", "0", "--strict",  "--", "/etc/confluent/docker/run"]
    volumes:
      - ./scripts/wait-for-it.sh:/scripts/wait-for-it.sh
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker:9092,EXTERNAL://kafka-broker:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_HOSTNAME: 0.0.0.0
      KAFKA_JMX_PORT: 9101
      KAFKA_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote.rmi.port=9101"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 20s
      retries: 20

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    command: ["/scripts/wait-for-it.sh", "kafka-broker:29092", "-t", "0", "--strict",  "--", "/etc/confluent/docker/run"]
    volumes:
      - ./scripts/wait-for-it.sh:/scripts/wait-for-it.sh
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 10

  kafka-control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: kafka-control-center
    container_name: kafka-control-center
    command: ["/scripts/wait-for-it.sh", "kafka-broker:29092", "-t", "0",  "--strict", "--", "/etc/confluent/docker/run"]
    volumes:
      - ./scripts/wait-for-it.sh:/scripts/wait-for-it.sh
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 10

  kafka-producer:
    image: ecakubi/python:3.11.7
    container_name: kafka-producer
    hostname: kafka-producer
    env_file:
      - ./.env
    volumes:
      - ./app:/app
      - ./data:/data
      - ./scripts/wait-for-it.sh:/scripts/wait-for-it.sh
    command: ["/scripts/wait-for-it.sh", "kafka-broker:29092", "-t", "0", "--strict", "--", "python3", "/app/kafka_producer.py"]
    depends_on:
      kafka-broker:
        condition: service_healthy
    networks:
      - confluent
  
  spark-master:
    image: ecakubi/spark:3.4.1
    container_name: spark-master
    hostname: spark-master
    env_file:
      - ./.env
    command: /bin/bash -c "cp -r /opt/bitnami/jars/ /opt/bitnami/spark/jars/ && bin/spark-class org.apache.spark.deploy.master.Master"
    volumes:
      - ./app:/opt/bitnami/app
      - ./data:/opt/bitnami/data
      - ./jars:/opt/bitnami/jars
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - confluent

  spark-worker-01:
    image: ecakubi/spark:3.4.1
    container_name: spark-worker-01
    hostname: spark-worker-01
    env_file:
      - ./.env
    command: /bin/bash -c "cp -r /opt/bitnami/jars/ /opt/bitnami/spark/jars/ && bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077"    
    volumes:
      - ./app:/opt/bitnami/app
      - ./data:/opt/bitnami/data
      - ./jars:/opt/bitnami/jars
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1G
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - confluent

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    hostname: cassandra
    env_file:
      - ./.env
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      #- CASSANDRA_PASSWORD=YOUR SECRET KEY
    networks:
      - confluent


networks:
  confluent:
    external: true